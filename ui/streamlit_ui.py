# -*- coding: utf-8 -*-
"""Streamlit_UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rkSH-FgSpztn3fZkLIpjbeKosU7IlgXp
"""

# app.py

!pip install streamlit

import streamlit as st
import numpy as np
import joblib

# Load model and selected features
model = joblib.load("models/best_random_forest.pkl")
selected_features = joblib.load("selected_features.pkl")

# Feature labels
feature_labels = {
    'age': "Age (Years)",
    'sex': "Sex (0 = Female, 1 = Male)",
    'cp': "Chest Pain Type (0–3)",
    'trestbps': "Resting Blood Pressure (mm Hg)",
    'chol': "Serum Cholesterol (mg/dl)",
    'fbs': "Fasting Blood Sugar > 120 mg/dl (1 = Yes, 0 = No)",
    'restecg': "Resting ECG Result (0–2)",
    'thalach': "Max Heart Rate Achieved",
    'exang': "Exercise Induced Angina (1 = Yes, 0 = No)",
    'oldpeak': "ST Depression Induced by Exercise",
    'slope': "Slope of ST Segment (0–2)",
    'ca': "Number of Major Vessels Colored (0–3)",
    'thal': "Thalassemia (1 = Normal, 2 = Fixed Defect, 3 = Reversible Defect)"
}

st.set_page_config(page_title="Heart Disease Prediction", layout="wide")

st.title("💓 Heart Disease Risk Prediction")
st.markdown("Enter your clinical measurements below. The model will estimate the likelihood of heart disease.")

# Prepare layout for input fields
col1, col2 = st.columns(2)
inputs = []

half = len(selected_features) // 2 + len(selected_features) % 2
features_col1 = selected_features[:half]
features_col2 = selected_features[half:]

with col1:
    for feature in features_col1:
        label = feature_labels.get(feature, feature)
        value = st.number_input(label, key=feature)
        inputs.append(value)

with col2:
    for feature in features_col2:
        label = feature_labels.get(feature, feature)
        value = st.number_input(label, key=feature)
        inputs.append(value)

# Predict button
if st.button("🔍 Predict"):
    X = np.array(inputs).reshape(1, -1)
    prediction = model.predict(X)[0]
    probability = model.predict_proba(X)[0][1]

    if prediction == 1:
        st.markdown("### ✅ **Positive**: Heart Disease Detected")
    else:
        st.markdown("### ❌ **Negative**: No Heart Disease")

    st.metric(label="Confidence (Probability of Disease)", value=f"{probability:.2%}")

# Notes section
st.markdown("---")
st.markdown("### ℹ️ Notes")
st.markdown("""
- **Sex**: 0 = Female, 1 = Male
- **Chest Pain Type (cp)**: 0 = Typical, 1 = Atypical, 2 = Non-anginal, 3 = Asymptomatic
- **Fasting Blood Sugar (fbs)**: 1 = >120 mg/dl
- **Thalassemia (thal)**: 1 = Normal, 2 = Fixed defect, 3 = Reversible defect
""")